//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using NUnit.Framework;

namespace StackExchange.Redis.Resilience.Tests
{
    public partial class ResilientConnectionMultiplexerFixture
    {

        [TestCase(true, false, false)]
        [TestCase(false, false, false)]
        [TestCase(false, true, false)]
        [TestCase(true, true, false)]
        [TestCase(true, false, true)]
        [TestCase(false, true, true)]
        public async Task ReconnectSubscribersAsync(bool unsubscribe, bool unsubscribeAll, bool unsubscribeAfterReconnect)
        {
            using var mux = CreateMultiplexer();
            var taskCount = 6;
            var taskValues = new List<KeyValuePair<TaskCompletionSource<int>, int>>();
            var tasks = CreateTaskList(taskValues, taskCount); // In order to avoid collection was modified exception
            var syncHandlers = CreateSyncSubscriptionHandlers(taskValues, 0, 2);
            var asyncHandlers = CreateAsyncSubscriptionHandlers(taskValues, 2, 2);
            var handlers = CreateSubscriptionHandlers(taskValues, 4, 2);

            var sub = mux.GetSubscriber();
            RedisChannel channel = "test";

            var queue1 = await (sub.SubscribeAsync(channel));
            queue1.OnMessage(syncHandlers[0]);
            var queue2 = await (sub.SubscribeAsync(channel));
            queue2.OnMessage(syncHandlers[1]);

            var queue3 = await (sub.SubscribeAsync(channel));
            queue3.OnMessage(asyncHandlers[0]);
            var queue4 = await (sub.SubscribeAsync(channel));
            queue4.OnMessage(asyncHandlers[1]);

            await (sub.SubscribeAsync(channel, handlers[0]));
            await (sub.SubscribeAsync(channel, handlers[1]));

            await (sub.PublishAsync(channel, true));
            AssertAllSubscribed();

            if (!unsubscribeAfterReconnect)
            {
                await (UnsubscribeAsync());
                tasks = CreateTaskList(taskValues, taskCount);
                await (sub.PublishAsync(channel, true));
                await (AssertTasksAsync());
            }

            await (ReconnectAsync(mux));
            if (unsubscribeAfterReconnect)
            {
                await (UnsubscribeAsync());
            }

            tasks = CreateTaskList(taskValues, taskCount);
            await (sub.PublishAsync(channel, true));
            await (AssertTasksAsync());

            Task AssertTasksAsync()
            {
                if (unsubscribeAll)
                {
                    return AssertUnsubscribedAllAsync();
                }
                else if (unsubscribe)
                {
                    AssertUnsubscribedTasks();
                }
                else
                {
                    AssertAllSubscribed();
                }
                return Task.CompletedTask;
            }

            void AssertUnsubscribedTasks()
            {
                Assert.That(Task.WaitAll(new[] {tasks[0], tasks[3], tasks[4]}, _timeout), Is.True);
                Assert.That(tasks[1].IsCompleted, Is.False);
                Assert.That(tasks[2].IsCompleted, Is.False);
                Assert.That(tasks[5].IsCompleted, Is.False);
                Assert.That(taskValues.Select(o => o.Value), Is.EquivalentTo(new List<int> {1, 0, 0, 1, 1, 0}));
            }

            void AssertAllSubscribed()
            {
                Assert.That(Task.WaitAll(tasks, _timeout), Is.True);
                Assert.That(taskValues.Select(o => o.Value), Is.EquivalentTo(new List<int> {1, 1, 1, 1, 1, 1}));
            }

            async Task AssertUnsubscribedAllAsync()
            {
                await (Task.Delay(100));
                Assert.That(tasks.Select(o => o.IsCompleted), Is.EqualTo(new[] {false, false, false, false, false, false}));
            }

            async Task UnsubscribeAsync()
            {
                if (unsubscribe)
                {
                    await (queue2.UnsubscribeAsync());
                    await (queue3.UnsubscribeAsync());
                    await (sub.UnsubscribeAsync(channel, handlers[1]));
                }

                if (unsubscribeAll)
                {
                    await (sub.UnsubscribeAllAsync());
                }
            }
        }

        [Test]
        public async Task ReconnectEventsAsync()
        {
            using var mux = CreateMultiplexer();
            var arguments = new List<EventArgs>();
            var totalReconnects = 0;

            EventHandler<InternalErrorEventArgs> internalError = (sender, args) => arguments.Add(args);
            EventHandler<EndPointEventArgs> configurationChanged = (sender, args) => arguments.Add(args);
            EventHandler<EndPointEventArgs> configurationChangedBroadcast = (sender, args) => arguments.Add(args);
            EventHandler<ConnectionFailedEventArgs> connectionFailed = (sender, args) => arguments.Add(args);
            EventHandler<ConnectionFailedEventArgs> connectionRestored = (sender, args) => arguments.Add(args);
            EventHandler<RedisErrorEventArgs> errorMessage = (sender, args) => arguments.Add(args);
            EventHandler<HashSlotMovedEventArgs> hashSlotMoved = (sender, args) => arguments.Add(args);

            mux.InternalError += internalError;
            mux.ConfigurationChanged += configurationChanged;
            mux.ConfigurationChangedBroadcast += configurationChangedBroadcast;
            mux.ConnectionFailed += connectionFailed;
            mux.ConnectionRestored += connectionRestored;
            mux.ErrorMessage += errorMessage;
            mux.HashSlotMoved += hashSlotMoved;
            mux.Reconnected += (sender, args) => totalReconnects++;

            AssertCalls();
            Assert.That(totalReconnects, Is.EqualTo(0));
            await (ReconnectAsync(mux));
            Assert.That(totalReconnects, Is.EqualTo(1));
            AssertCalls();

            void AssertCalls()
            {
                arguments.Clear();
                CallHandlers();
                Assert.That(arguments.Where(o => o == null).ToList(), Has.Count.EqualTo(7));
            }

            void CallHandlers()
            {
                Raise<InternalErrorEventArgs>(mux, nameof(IConnectionMultiplexer.InternalError), null);
                Raise<EndPointEventArgs>(mux, nameof(IConnectionMultiplexer.ConfigurationChanged), null);
                Raise<EndPointEventArgs>(mux, nameof(IConnectionMultiplexer.ConfigurationChangedBroadcast), null);
                Raise<ConnectionFailedEventArgs>(mux, nameof(IConnectionMultiplexer.ConnectionFailed), null);
                Raise<ConnectionFailedEventArgs>(mux, nameof(IConnectionMultiplexer.ConnectionRestored), null);
                Raise<RedisErrorEventArgs>(mux, nameof(IConnectionMultiplexer.ErrorMessage), null);
                Raise<HashSlotMovedEventArgs>(mux, nameof(IConnectionMultiplexer.HashSlotMoved), null);
            }
        }

        [Test]
        public async Task ReconnectServerByFailureAsync()
        {
            using var mux = CreateMultiplexer();
            var server = mux.GetServer(mux.GetEndPoints()[0]);
            await (server.DatabaseSizeAsync());

            // Simulate RedisConnectionException
            await (mux.ConnectionMultiplexer.DisposeAsync());
            ResetDisposeField(mux.ConnectionMultiplexer);

            Assert.ThrowsAsync<RedisConnectionException>(() => server.DatabaseSizeAsync()); // set first error
            await (Task.Delay(100)); // (NOW - First error date) must be greater than ReconnectErrorThreshold
            Assert.ThrowsAsync<RedisConnectionException>(() => server.DatabaseSizeAsync()); // set previous error
            await (Task.Delay(10)); // (NOW - Last error date) must be lower than ReconnectErrorThreshold

            await (server.DatabaseSizeAsync()); // set last error
        }

        [Test]
        public async Task ReconnectDatabaseByFailureAsync()
        {
            using var mux = CreateMultiplexer();
            var db = mux.GetDatabase();
            var key = "test";
            await (db.StringGetAsync(key));

            // Simulate RedisConnectionException
            await (mux.ConnectionMultiplexer.DisposeAsync());
            ResetDisposeField(mux.ConnectionMultiplexer);

            Assert.ThrowsAsync<RedisConnectionException>(() => db.StringGetAsync(key)); // set first error
            await (Task.Delay(100)); // (NOW - First error date) must be greater than ReconnectErrorThreshold
            Assert.ThrowsAsync<RedisConnectionException>(() => db.StringGetAsync(key)); // set previous error
            await (Task.Delay(10)); // (NOW - Last error date) must be lower than ReconnectErrorThreshold

            await (db.StringGetAsync(key)); // set last error
        }

        [Test]
        public async Task ReconnectSubscriberByFailureAsync()
        {
            using var mux = CreateMultiplexer();
            var subscriber = mux.GetSubscriber();
            RedisChannel channel = "test";
            await (subscriber.PublishAsync(channel, true));

            // Simulate RedisConnectionException
            await (mux.ConnectionMultiplexer.DisposeAsync());
            ResetDisposeField(mux.ConnectionMultiplexer);

            Assert.ThrowsAsync<RedisConnectionException>(() => subscriber.PublishAsync(channel, true)); // set first error
            await (Task.Delay(100)); // (NOW - First error date) must be greater than ReconnectErrorThreshold
            Assert.ThrowsAsync<RedisConnectionException>(() => subscriber.PublishAsync(channel, true)); // set previous error
            await (Task.Delay(10)); // (NOW - Last error date) must be lower than ReconnectErrorThreshold

            await (subscriber.PublishAsync(channel, true)); // set last error
        }

        [Test]
        public async Task ReconnectDatabaseAsync()
        {
            using var mux = CreateMultiplexer();
            var db = mux.GetDatabase();
            await (db.StringSetAsync("test", "test"));

            Assert.That((await (db.StringGetAsync("test"))).ToString(), Is.EqualTo("test"));
            await (ReconnectAsync(mux));
            Assert.That((await (db.StringGetAsync("test"))).ToString(), Is.EqualTo("test"));
        }

        [Test]
        public async Task ReconnectServerAsync()
        {
            using var mux = CreateMultiplexer();
            var endpoint = mux.GetEndPoints()[0];
            var server = mux.GetServer(endpoint);
            var dbSize = await (server.DatabaseSizeAsync());
            await (ReconnectAsync(mux));
            Assert.That(dbSize, Is.EqualTo(await (server.DatabaseSizeAsync())));
        }

        private async Task ReconnectAsync(ResilientConnectionMultiplexer mux, CancellationToken cancellationToken = default(CancellationToken))
        {
            var oldMux = mux.ConnectionMultiplexer;
            Assert.That(await (mux.TryReconnectAsync(cancellationToken)), Is.False); // set first error
            await (Task.Delay(100, cancellationToken)); // (NOW - First error date) must be greater than ReconnectErrorThreshold
            Assert.That(await (mux.TryReconnectAsync(cancellationToken)), Is.False); // set previous error
            await (Task.Delay(10, cancellationToken)); // (NOW - Last error date) must be lower than ReconnectErrorThreshold
            Assert.That(await (mux.TryReconnectAsync(cancellationToken)), Is.True); // set last error
            Assert.That(mux.LastReconnectTicks, Is.Not.EqualTo(0L));
            Assert.That(oldMux, Is.Not.EqualTo(mux.ConnectionMultiplexer));
        }
    }
}
